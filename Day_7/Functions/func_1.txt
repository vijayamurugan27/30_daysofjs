Function declaration:
    //declaring a function without a parameter
    function functionName() {
    // code goes here
    }
    functionName() // calling function by its name and with parentheses


Function without a parameter and return
    // function without parameter,  a function which make a number square
    function square() {
    let num = 2
    let sq = num * num
    console.log(sq)
    }

    square() // 4

    // function without parameter
    function addTwoNumbers() {
    let numOne = 10
    let numTwo = 20
    let sum = numOne + numTwo

    console.log(sum)
    }

    addTwoNumbers() // a function has to be called by its name to be executed 

      function printFullName (){
        let firstName = 'Asabeneh'
        let lastName = 'Yetayeh'
        let space = ' '
        let fullName = firstName + space + lastName
        console.log(fullName)
    }

    printFullName() // calling a function

Function with a parameter

    In a function we can pass different data types(number, string, boolean, object, function) as a parameter.

        // function with one parameter
        function functionName(parm1) {
        //code goes her
        }
        functionName(parm1) // during calling or invoking one argument needed

        function areaOfCircle(r) {
        let area = Math.PI * r * r
        return area
        }

        console.log(areaOfCircle(10)) // should be called with one argument

        function square(number) {
        return number * number
        }

        console.log(square(10))
    
Function with two parameters

        // function with two parameters
        function functionName(parm1, parm2) {
        //code goes her
        }
        functionName(parm1, parm2) // during calling or invoking two arguments needed
        // Function without parameter doesn't take input, so lets make a function with parameters
        function sumTwoNumbers(numOne, numTwo) {
        let sum = numOne + numTwo
        console.log(sum)
        }
        sumTwoNumbers(10, 20) // calling functions
        // If a function doesn't return it doesn't store data, so it should return

        function sumTwoNumbers(numOne, numTwo) {
        let sum = numOne + numTwo
        return sum
        }

        console.log(sumTwoNumbers(10, 20))
        function printFullName(firstName, lastName) {
        return `${firstName} ${lastName}`
        }
        console.log(printFullName('Asabeneh', 'Yetayeh'))


Function with many parameters
        // function with multiple parameters
        function functionName(parm1, parm2, parm3,...){
        //code goes here
        }
        functionName(parm1,parm2,parm3,...) // during calling or invoking three arguments needed


        // this function takes array as a parameter and sum up the numbers in the array
        function sumArrayValues(arr) {
        let sum = 0;
        for (let i = 0; i < arr.length; i++) {
            sum = sum + arr[i];
        }
        return sum;
        }
        const numbers = [1, 2, 3, 4, 5];
            //calling a function
        console.log(sumArrayValues(numbers));


        const areaOfCircle = (radius) => {
        let area = Math.PI * radius * radius;
        return area;
        }
        console.log(areaOfCircle(10))

Function with unlimited number of parameters
        // Let us access the arguments object
​
        function sumAllNums() {
        console.log(arguments)
        }

        sumAllNums(1, 2, 3, 4)
        // Arguments(4) [1, 2, 3, 4, callee: ƒ, Symbol(Symbol.iterator): ƒ]

Anonymous Function

Anonymous function or without name

        const anonymousFun = function() {
        console.log(
            'I am an anonymous function and my value is stored in anonymousFun'
        )
        }

Expression Function

Expression functions are anonymous functions. After we create a function without a name and we assign it to a variable. 
To return a value from the function we should call the variable. Look at the example below.


        // Function expression
        const square = function(n) {
        return n * n
        }

        console.log(square(2)) // -> 4



Self Invoking Functions

    Self invoking functions are anonymous functions which do not need to be called to return a value.

        (function(n) {
        console.log(n * n)
        })(2) // 4, but instead of just printing if we want to return and store the data, we do as shown below.


        let squaredNum = (function(n) {
        return n * n
        })(10)

        console.log(squaredNum)

Arrow Function:
        Arrow function is an alternative to write a function, however function declaration and arrow function have some minor differences.

        Arrow function uses arrow instead of the keyword function to declare a function. Let us see both function declaration and arrow function.

        // This is how we write normal or declaration function
        // Let us change this declaration function to an arrow function
        function square(n) {
        return n * n
        }

        console.log(square(2)) // 4

        const square = n => {
        return n * n
        }

        console.log(square(2))  // -> 4

        // if we have only one line in the code block, it can be written as follows, explicit return
        const square = n => n * n  // -> 4

Function with default parameters

        Sometimes we pass default values to parameters, when we invoke the function if we do not pass an argument the default value will be used. 
        Both function declaration and arrow function can have a default value or values.

